# path in which store dataset and neural networks
# (redundant files, the results are stored in topology as well)
path = resources/

# ip address of database where information about load and traffic are stored. It is on nimbus node
# ip = esxlocal
ip = vm-aniello-storm-00

# topology name
name = RollingTopWords

# Tweet Replication Factor. This value has to be set equal to the trf set in data-driver
# trf = 450 for not compressed dataset
# trf = 20  for compressed dataset
trf = 20

# max traffic value in req/min not normalized.
# From maxTraffic value and trf in the costructor of the class Topology are computed 
# the variables MAX_TRAFFIC_MIN and MAX_TRAFFIC_SEC. Will then used the req/s forecasted
# maxTraffic * trf = 300 * 450 = 135000 event/min -> 2250 event/sec
# maxTraffic = 587
maxTraffic = 35220

# component list with related parallelism for profiling phase
spout0 = tweetReader,4
bolt6  = __acker,4
bolt0  = __metricsmidlab.storm.scheduler.SchedulerMetricsConsumer,1
bolt1  = counter,4
bolt2  = finalRanker,1
bolt3  = intermediateRanker,4
bolt4  = stopWordFilter,4
bolt5  = wordGenerator,4

# topology graph representation
# tweetReader -> wordGenerator -> stopWordFilter -> counter -> intermediateRanker -> finalRanker
#  '-> __acker    '-> __acker      '-> __acker       '-> __acker 

# logical edge between components
edge0  = tweetReader,wordGenerator
edge1  = wordGenerator,stopWordFilter
edge2  = stopWordFilter,counter
edge3  = counter,intermediateRanker
edge4  = intermediateRanker,finalRanker
edge5  = tweetReader,__acker
edge6  = wordGenerator,__acker
edge7  = stopWordFilter,__acker
edge8  = counter,__acker

# matching component-executor (for profiling phase)
###### acker = 4 #######
task0  = __acker,1-4
task1  = __metricsmidlab.storm.scheduler.SchedulerMetricsConsumer,5
task2  = counter,6-9
task3  = finalRanker,10
task4  = intermediateRanker,11-14
task5  = stopWordFilter,15-18
task6  = tweetReader,19-22
task7  = wordGenerator,23-26

# matching component-thread
###### acker = 0 #######
#task0  = __metricsmidlab.storm.scheduler.SchedulerMetricsConsumer,1
#task1  = counter,2-5
#task2  = finalRanker,6
#task3  = intermediateRanker,7-10
#task4  = stopWordFilter,11-14
#task5  = tweetReader,15-18
#task6  = wordGenerator,19-22

