# path in which store dataset and neural networks
# (redundant files, the results are stored in topology as well)
path = resources/

# ip address of database where information about load and traffic are stored. It is on nimbus node
ip = esxlocal
#ip = vm-aniello-storm-00

# topology name
name = senti-rolling

# Tweet Replication Factor. This value has to be set equal to the trf set in data-driver
# trf = 450 for not compressed dataset
# trf = 20  for compressed dataset
trf = 20

# max traffic value in req/min not normalized.
# From maxTraffic value and trf in the costructor of the class Topology are computed 
# the variables MAX_TRAFFIC_MIN and MAX_TRAFFIC_SEC. Will then used the req/s forecasted
# maxTraffic * trf = 300 * 450 = 135000 event/min -> 2250 event/sec
# maxTraffic = 587
maxTraffic = 35220

# component list with related parallelism for profiling phase
spout0 = tweet-reader,4
bolt0  = __acker,4
bolt1  = __metricsmidlab.storm.scheduler.SchedulerMetricsConsumer,1
bolt2  = counter,4
bolt3  = feature-generation-bolt,4
bolt4  = pos-tagger-bolt,4
bolt5  = preprocessor-bolt,4
bolt6  = stopWordFilter,4
bolt7  = svm-bolt,4
bolt8  = tokenizer-bolt,4
bolt9  = wordGenerator,4

# topology graph representation
# tweet-reader -> tokenizer -> preprocessor -> pos-tagger -> feature-generation -> svm
#   '-> __acker     '-> __acker   '-> __acker    '-> __acker   '-> __acker           '-> __acker 

# logical edge between components
edge0  = tweet-reader,tokenizer-bolt
edge1  = tokenizer-bolt,preprocessor-bolt
edge2  = preprocessor-bolt,pos-tagger-bolt
edge3  = pos-tagger-bolt,feature-generation-bolt
edge4  = feature-generation-bolt,svm-bolt
edge5  = tweet-reader,__acker
edge6  = tokenizer-bolt,__acker
edge7  = preprocessor-bolt,__acker
edge8  = pos-tagger-bolt,__acker
edge9  = feature-generation-bolt,__acker
edge10 = svm-bolt,__acker

edge11  = tweet-reader,wordGenerator
edge12  = wordGenerator,stopWordFilter
edge13  = stopWordFilter,counter
edge14  = wordGenerator,__acker
edge15  = stopWordFilter,__acker
edge16  = counter,__acker

# matching component-executor (for profiling phase)
###### acker = 4 #######
task0  = __acker,1-4
task1  = __metricsmidlab.storm.scheduler.SchedulerMetricsConsumer,5
task2  = counter,6-9
task3  = feature-generation-bolt,10-13
task4  = pos-tagger-bolt,14-17
task5  = preprocessor-bolt,18-21
task6  = stopWordFilter,22-25
task7  = svm-bolt,26-29
task8  = tokenizer-bolt,30-33
task9  = tweet-reader,34-37
task10 = wordGenerator,38-41

